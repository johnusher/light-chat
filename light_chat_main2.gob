package main

import (
	"bufio"
	"bytes"
	"context"
	"flag"
	"fmt"
	"log"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"syscall"
	"time"
	"unsafe"

	openai "github.com/sashabaranov/go-openai"
)

var (
	winmm         = syscall.MustLoadDLL("winmm.dll")
	mciSendString = winmm.MustFindProc("mciSendStringW")
	reader        = bufio.NewReader(os.Stdin)
)

func readKey(input chan rune) {
	char, _, err := reader.ReadRune()
	if err != nil {
		log.Fatal(err)
	}
	time.Sleep(200 * time.Millisecond)
	input <- char
}

func MCIWorker(lpstrCommand string, lpstrReturnString string, uReturnLength int, hwndCallback int) uintptr {
	i, _, _ := mciSendString.Call(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(lpstrCommand))),
		uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(lpstrReturnString))),
		uintptr(uReturnLength), uintptr(hwndCallback))
	return i
}

func main() {
	log.Printf("Starting lightChat3000")

	resetChat := flag.Bool("r", false, "reset chat history to xmas example")
	flag.Parse()

	comPort := "COM5"

	if runtime.GOOS == "windows" {
		boards, err := exec.Command("arduino-cli.exe", "board", "list").Output()
		if err != nil {
			log.Fatal("COM problem: ", err)
		}

		boardsS := string(boards)
		charS := "COM"
		index := strings.Index(boardsS, charS)

		if index == -1 {
			fmt.Println("No Arduino connected to USB?")
			os.Exit(3)
		}
		comPort = boardsS[index : index+4]
		log.Printf("comPort = %v\n", comPort)
	}

	var duinoExamplePrompt []byte
	var err error

	if *resetChat {
		duinoExamplePrompt, err = os.ReadFile("xmasTwinkleDuino.c")
		if err != nil {
			log.Fatal("Error reading xmasTwinkleDuino.c: ", err)
		}
		log.Printf("Resetting chat")
		os.Rename("chatHist.txt", "old_chatHist.txt")
	} else {
		duinoExamplePrompt, err = os.ReadFile("duinoCode/duinoCode.ino")
		if err != nil {
			log.Fatal("Error reading duinoCode.ino: ", err)
		}
		log.Printf("Using duinoCode.ino")
	}

	os.Rename("mic.wav", "old_mic.wav")

	fmt.Println("winmm.dll Record Audio to .wav file")

	log.Printf("Opening audio capture")
	if MCIWorker("open new type waveaudio alias capture", "", 0, 0) != 0 {
		log.Fatal("Error opening audio capture")
	}

	log.Printf("Setting bitspersample")
	if MCIWorker("set capture bitspersample 16", "", 0, 0) != 0 {
		log.Fatal("Error setting bitspersample")
	}

	log.Printf("Setting channels")
	if MCIWorker("set capture channels 1", "", 0, 0) != 0 {
		log.Fatal("Error setting channels")
	}

	log.Printf("Setting alignment")
	if MCIWorker("set capture alignment 2", "", 0, 0) != 0 {
		log.Fatal("Error setting alignment")
	}

	log.Printf("Starting recording")
	if MCIWorker("record capture", "", 0, 0) != 0 {
		log.Fatal("Error starting recording")
	}

	input := make(chan rune, 1)
	fmt.Println("Recording... press any key to stop")

	go readKey(input)
	select {
	case <-input:
	case <-time.After(3 * time.Second):
		fmt.Println("Time out!")
	}

	log.Printf("Saving recording")
	if MCIWorker("save capture mic.wav", "", 0, 0) != 0 {
		log.Fatal("Error saving recording")
	}

	log.Printf("Closing audio capture")
	if MCIWorker("close capture", "", 0, 0) != 0 {
		log.Fatal("Error closing capture")
	}

	fmt.Println("Audio saved to mic.wav")

	secretAPI, err := os.ReadFile("../../chatgpt.txt")
	if err != nil {
		log.Fatal("Error reading API key: ", err)
	}
	apiKey := string(secretAPI)

	client := openai.NewClient(apiKey)
	ctx := context.Background()

	req := openai.AudioRequest{
		Model:    openai.Whisper1,
		FilePath: "mic.wav",
	}

	resp, err := client.CreateTranscription(ctx, req)
	if err != nil {
		log.Fatal("Transcription error: ", err)
	}
	fmt.Println(resp.Text)

	newPrompt := resp.Text
	newPromptStr := ""

	var promptIntro string
	if *resetChat {
		promptIntro = "Here is an example C code for an Arduino using the FastLED library to create a christmas effect on an LED strip:"
	} else {
		promptIntro = "Here is an example C code for an Arduino using the FastLED library to create light patterns for an LED strip:"
	}

	req2 := openai.ChatCompletionRequest{
		Model: openai.GPT4,
		Messages: []openai.ChatCompletionMessage{
			{Role: openai.ChatMessageRoleUser, Content: promptIntro},
			{Role: openai.ChatMessageRoleUser, Content: string(duinoExamplePrompt)},
			{Role: openai.ChatMessageRoleUser, Content: "please generate new C code to satisfy the following request and output the modified code in its entirety beginning with #include <FastLED.h> and include the line: #define COLOR_ORDER GRB. "},
			{Role: openai.ChatMessageRoleUser, Content: newPrompt},
			{Role: openai.ChatMessageRoleUser, Content: "Please provide a response in C code. Here is the request: "},
		},
	}
	newPromptStr = promptIntro + string(duinoExamplePrompt) + "please generate new C code to satisfy the following request and output the modified code in its entirety beginning with #include <FastLED.h> and include the line: #define COLOR_ORDER GRB. " + newPrompt + "Please provide a response in C code. Here is the request: "

	if err := os.WriteFile("newPrompt.txt", []byte(newPromptStr), 0644); err != nil {
		log.Fatal("Error writing newPrompt.txt: ", err)
	}

	resp2, err := client.CreateChatCompletion(context.Background(), req2)
	if err != nil {
		log.Fatal("ChatCompletion error: ", err)
	}

	responseContent := resp2.Choices[0].Message.Content
	str := string(responseContent)

	if err := os.WriteFile("chatResponseRaw.txt", []byte(str), 0644); err != nil {
		log.Fatal("Error writing chatResponseRaw.txt: ", err)
	}

	index := strings.Index(str, "#include")
	if index == -1 {
		log.Fatal("Character '#include' not found in the string.")
	}
	trimmedStr := str[index:]

	char := "```"
	index2 := strings.Index(trimmedStr, char)
	if index2 > 0 {
		trimmedStr = trimmedStr[:index2]
	}

	if err := os.WriteFile("duinoCode/duinoCode.ino", []byte(trimmedStr), 0644); err != nil {
		log.Fatal("Error writing duinoCode.ino: ", err)
	}

	compileAndUpload(comPort, client, ctx, req2, trimmedStr)
}

func compileAndUpload(comPort string, client *openai.Client, ctx context.Context, req2 openai.ChatCompletionRequest, trimmedStr string) {
	if runtime.GOOS == "windows" {
		c := exec.Command("arduino-cli.exe", "compile", "--fqbn", "arduino:avr:diecimila:cpu=atmega328", "duinoCode\\duinoCode.ino")
		var out bytes.Buffer
		var stderr bytes.Buffer
		c.Stdout = &out
		c.Stderr = &stderr

		err := c.Run()
		if err != nil {
			log.Println(fmt.Sprint(err) + ": " + stderr.String())
			handleCompileError(client, ctx, req2, trimmedStr, stderr.String(), comPort)
			return
		}
		fmt.Println("Compile Result: " + out.String())

		c = exec.Command("arduino-cli.exe", "upload", "-p", comPort, "-b", "arduino:avr:diecimila:cpu=atmega328", "duinoCode\\duinoCode.ino", "-v")
		c.Stdout = &out
		c.Stderr = &stderr

		err = c.Run()
		if err != nil {
			log.Fatal(fmt.Sprint(err) + ": " + stderr.String())
		}
		fmt.Println("Upload Result: " + out.String())
	}
}

func handleCompileError(client *openai.Client, ctx context.Context, req2 openai.ChatCompletionRequest, trimmedStr, compileError, comPort string) {
	log.Printf("Compilation Error: %s\n", compileError)

	newPrompt := fmt.Sprintf("The following Arduino C code has a compilation error:\n\n%s\n\nError:\n\n%s\n\nPlease fix the code.", trimmedStr, compileError)

	req2.Messages = append(req2.Messages, openai.ChatCompletionMessage{
		Role:    openai.ChatMessageRoleUser,
		Content: newPrompt,
	})

	resp2, err := client.CreateChatCompletion(context.Background(), req2)
	if err != nil {
		log.Fatal("ChatCompletion error: ", err)
	}

	responseContent := resp2.Choices[0].Message.Content
	str := string(responseContent)

	if err := os.WriteFile("chatResponseFix.txt", []byte(str), 0644); err != nil {
		log.Fatal("Error writing chatResponseFix.txt: ", err)
	}

	index := strings.Index(str, "#include")
	if index == -1 {
		log.Fatal("Character '#include' not found in the string.")
	}
	trimmedStr = str[index:]

	char := "```"
	index2 := strings.Index(trimmedStr, char)
	if index2 > 0 {
		trimmedStr = trimmedStr[:index2]
	}

	if err := os.WriteFile("duinoCode/duinoCode.ino", []byte(trimmedStr), 0644); err != nil {
		log.Fatal("Error writing duinoCode.ino: ", err)
	}

	log.Println("Retrying compilation with fixed code...")
	compileAndUpload(comPort, client, ctx, req2, trimmedStr)
}
