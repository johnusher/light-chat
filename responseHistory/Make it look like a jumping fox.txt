Creating a jumping fox pattern on an LED strip with the FastLED library using C programming language is quite abstract. Unfortunately, there's no direct way to represent complex shapes or animations such as a "jumping fox" on a 1-dimensional LED strip.

However, we can symbolize the action by using specific colors for the fox and creating a jumping animation with those colors. Let's consider orange to represent the fox. We can sequentially light up the LEDs from one end of the strip to the other to represent the fox jumping across. Here's how we could implement this in code:

```C
#include <FastLED.h>

#define LED_PIN     6
#define COLOR_ORDER GRB
#define CHIPSET     WS2812B
#define NUM_LEDS    30
#define BRIGHTNESS  150
#define FRAMES_PER_SECOND 20
#define FOX_LENGTH  5  // Length of 'fox' in LEDs

CRGB leds[NUM_LEDS];

void setup() {
  delay(1000); // sanity delay
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
}

void loop() {
  JumpingFox(); // run simulation frame
  
  FastLED.show(); // display this frame
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void JumpingFox() {
  static int startPos = 0;

  // Turn off all LEDs
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::Black;
  }

  // Show 'fox' on LED strip.
  for (int i = 0; i < FOX_LENGTH; i++) {
    if(startPos + i < NUM_LEDS) {
      leds[startPos + i] = CRGB::Orange; // Set orange color for fox LEDs
    }
  }

  // Repeat the animation if 'fox' reaches end of strip, else move the 'fox' one LED further
  if(startPos + FOX_LENGTH >= NUM_LEDS) {
    startPos = 0;
  } else {
    startPos++;
  }
}
```

This code first turns off all LEDs and then lights up a number of consecutive LEDs in orange color, representing the 'fox'. The position of these orange LEDs are then changed in every frame, creating a movement from one side of the LED strip to the other, symbolizing the fox's jump. When the 'fox' reaches the end of the strip, the animation repeats.