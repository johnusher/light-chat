Here is the C code which will give a twinkling blue effect, to create an effect similar to bluebell flowers scattered around a forest. 

```
#include <FastLED.h>

#define LED_PIN     6  // do not change
#define COLOR_ORDER GRB  // do not change
#define CHIPSET     WS2812B   // do not change
#define NUM_LEDS    30  // do not change

#define BRIGHTNESS  150    // set brightness of all LEDs. 150 is default
#define FRAMES_PER_SECOND 5   // 20 is very fast, 10 is normal, 5 is slow. Above 30 is too fast.

CRGB leds[NUM_LEDS];

void setup() {
  delay(1000); // sanity delay
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);  // set brightness of all LEDs
}

void loop() {
  BluebellForest(); // run simulation frame
  
  FastLED.show(); // display this frame
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void BluebellForest() {
  // Fill the LEDs with a blue shade
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB::Blue;   
  }

  // Optional: Add a twinkling effect
  for (int j = 0; j < NUM_LEDS; j++) {
    if (random8() < 50) { // adjust the probability to control twinkling
      leds[j] = CRGB::Black; // 'turn off' the LED randomly
    }
  }
}
```

In the above code, I replaced the pattern of red, green and white with a constant blue color, to represent the bluebell flowers. By randomly turning off some LEDs, it simulates the scattered nature of the bluebell flowers in the forest.