Here is the modified Arduino C code based on the given requirements:

```c
#include <FastLED.h>

#define LED_PIN     6  // do not change
#define COLOR_ORDER GRB  // do not change
#define CHIPSET     WS2812B   // LED chipset. do not change
#define NUM_LEDS    30  // length of the light strip. number of LEDs in the light strip. do not change

#define BRIGHTNESS  150    // set brightness of all LEDs. 150 is default
#define FRAMES_PER_SECOND 5   // 20 is very fast, 10 is normal, 5 is slow. Above 30 is too fast.

CRGB leds[NUM_LEDS];
int currentLED = 0;
int direction = 1;
int flashCount = 0;
bool flashing = false;

void setup() {
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);  // set brightness of all LEDs
}

void loop() {
  if(flashing) {
    flashLights();
    if(flashCount < 4) {
      flashCount++;
    } else {
      flashCount = 0;
      flashing = false;
    }
  } else {
    moveDot();
  }
  FastLED.show(); // display this frame
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void moveDot() {
  if (direction == 1) {
    if (currentLED < NUM_LEDS) {
      FastLED.clear();
      leds[currentLED] = CRGB::Blue;
      currentLED++;
      FRAMES_PER_SECOND += 1;
    } else {
      direction = -1;
      currentLED = NUM_LEDS - 1;
    }
  } else {
    if (currentLED >= 0) {
      FastLED.clear();
      leds[currentLED] = CRGB::Yellow;
      currentLED--;
      flashyLights();
      FRAMES_PER_SECOND -= 1;
    } else {
      direction = 1;
      currentLED = 0;
      flashing = true;
    }
  }
}

void flashLights() {
  for(int i=0; i<NUM_LEDS; i++)
    leds[i] = (flashCount % 2) ? CRGB::White : CRGB::Black;
}

void flashyLights() {
  if(random8() < 50) leds[currentLED] = CRGB::Black;
}
```
The decision for this response was guided by the specifications provided in the request. I created a moving dot by iterating over the whole strip and using an if-else structure to stipulate the change of colors. The dot starts as blue and moves faster as it advances. When it hits the end, the dot changes to yellow and begins moving back more slowly. This is controlled by increasing the delay during the forward run and decreasing it during the backward run. When finally the dot finishes its backward run, a flag `flashing` is set to indicate that we entered a new phase where the lights flash white four times, controlled by `flashLights()` function. Notably, FastLED library conveniently provides a `clear()` method to extinguish the previous light, facilitating an easier implementation of the moving dots.