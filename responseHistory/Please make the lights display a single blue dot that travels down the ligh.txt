Here is the modified C code to meet your requested pattern:

```C
#include <FastLED.h>

#define LED_PIN     6
#define COLOR_ORDER GRB
#define CHIPSET     WS2812B
#define NUM_LEDS    30

#define BRIGHTNESS  150
#define FRAMES_PER_SECOND 120

CRGB leds[NUM_LEDS];
uint8_t speed = 0;
uint8_t pos = 0;
bool forward = true;

void setup() {
  delay(1000);
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);
}

void loop() {
  FastLED.clear(); // clear the leds
  if (forward) {
    leds[pos] = CRGB::Blue;
    pos++;
    if (pos >= NUM_LEDS) {
      forward = false;
      leds[pos] = CRGB::Yellow;
    }
    speed++;
  } else {
    leds[pos] = CRGB::Yellow;
    pos--;
    if (pos <= 0) {
      forward = true;
      for (int i = 0; i < 4; i++) {
        FastLED.showColor(CRGB::White);  
        delay(500);
        FastLED.showColor(CRGB::Black);
        delay(500);
      }
      leds[random8(NUM_LEDS)] = CRGB(random8(), random8(), random8());
    }
    speed--;
  }
   
  FastLED.show();
  FastLED.delay(1000 / (FRAMES_PER_SECOND + speed));
}   
```
In this code, a moving dot is created by updating the position of a single lit LED along the length of the light strip in each loop iteration. A boolean variable 'forward' is used to track and switch the LED's travel direction. When the LED reaches the end of the strip, it changes color and direction.
As requested, the LED starts slow and speeds up when traveling forward, and slows down when traveling backward. This is implemented by incrementing and decrementing the 'speed' variable. At each end, a light show flashes four times before a single random colored LED is picked.
