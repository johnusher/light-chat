Here is the modified C code that makes the motion of the existing pattern slower and a bit more random:

```C
#include <FastLED.h>

#define LED_PIN     6  
#define COLOR_ORDER GRB  
#define CHIPSET     WS2812B   
#define NUM_LEDS    30  

#define BRIGHTNESS  150   
#define FRAMES_PER_SECOND 20   // decreased for slower motion

CRGB leds[NUM_LEDS];

void setup() {
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);  
}

void loop() {
  TripZone(); // run the Trip Zone pattern
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void TripZone() {
  // random number generator
  random16_add_entropy(random());

  // Set up a color palette of psychedelic colors
  CRGBPalette16 palette = PartyColors_p;
  
  // Step through the LEDs, using the palette to get the color
  for (int i = 0; i < NUM_LEDS; ++i) {
    // The randomness is added to the triwave function to make the transition more random
    leds[i] = ColorFromPalette(palette, triwave8(random8() + (i * 256 / NUM_LEDS) + (millis() / 8)));
  }

  FastLED.show(); // display this frame
}
```

This new version of the code implements two changes to make the motion of the LED pattern slower and more random. 

1. It reduces the frames per second (FRAMES_PER_SECOND) to slow down the animation's speed.
   
2. It introduces randomness to the color transition within the TripZone() function. The random8() function from the FastLED library generates a random number between 0 to 255. This number is added to the index i and the result is passed to the triwave function. It also increases the divisor for the millis() function to slow down the color change rate, adding an element of randomness and unpredictability to the pattern. These changes make the LED light pattern's motion slower and more random which satisfies the provided request.