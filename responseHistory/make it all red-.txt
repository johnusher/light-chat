```c
#include <FastLED.h>

#define LED_PIN     6  // do not change
#define COLOR_ORDER GRB  // do not change
#define CHIPSET     WS2812B   // LED chipset. do not change
#define NUM_LEDS    30  // length of the light strip. number of LEDs in the light strip. do not change

#define BRIGHTNESS  150    // set brightness of all LEDs. 150 is default
#define FRAMES_PER_SECOND 5   // 20 is very fast, 10 is normal, 5 is slow. Above 30 is too fast.

CRGB leds[NUM_LEDS];

void setup() {
  delay(1000); // delay before we start
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);  // set brightness of all LEDs
}

void loop() {
  MakeItAllRed(); // make all LEDs red
  
  FastLED.show(); // display this frame
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void MakeItAllRed() {
  // Fill the LEDs with red
  for (int i = 0; i < NUM_LEDS; i ++) {
    leds[i] = CRGB::Red; 
  }
}
```
This code replaces the existing `ChristmasLights()` function with a new `MakeItAllRed()` function that sets all of the LEDs to red. The `setup()` and `loop()` functions are the same as before, but the `loop()` function now calls `MakeItAllRed()` instead of `ChristmasLights()`. This is because the request was to "make it all red", so we want to fill the entire strip with red LEDs. The `MakeItAllRed()` function uses a simple for loop to accomplish this, setting every LED to red by using the `CRGB::Red` color defined in the FastLED library.