Here's an example of how you could program a "trip zone" LED pattern for Burning Man. The pattern will cycle through a variety of vibrant colors at a different speed.

```
#include <FastLED.h>

#define LED_PIN     6  // do not change
#define COLOR_ORDER GRB  // do not change
#define CHIPSET     WS2812B   // LED chipset. do not change
#define NUM_LEDS    30  // length of the light strip. number of LEDs in the light strip. do not change

#define BRIGHTNESS  150    // set brightness of all LEDs. 150 is default
#define FRAMES_PER_SECOND 60   // increased for a faster pattern

CRGB leds[NUM_LEDS];

void setup() {
  delay(1000); // delay before we start
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setBrightness(BRIGHTNESS);  // set brightness of all LEDs
}

void loop() {
  TripZone(); // run the Trip Zone pattern
  
  FastLED.show(); // display this frame
  FastLED.delay(1000 / FRAMES_PER_SECOND);
}

void TripZone() {
  // Set up a color palette of psychedelic colors
  CRGBPalette16 palette = PartyColors_p;
  
  // Step through the LEDs, using the palette to get the color
  for (int i = 0; i < NUM_LEDS; ++i) {
    // Use the triwave functions to create an oscillating effect between colors in the palette
    leds[i] = ColorFromPalette(palette, triwave8((i * 256 / NUM_LEDS) + millis() / 4));
  }
}
```

This code uses the `CRGBPalette16` data type and the `PartyColors_p` palette (built into the FastLED library) to get an array of colorful, vibrant colors.

We update the color of each LED every frame by indexing into this palette, using triwave functions to oscillate between different colors. The parameter to the `triwave8` function is chosen to create a waveform that repeats along the length of the LED strip.

Please note the above code assumes a common anode LED, if your LED is common cathode, the color sequence may need to change. This code will create a dynamic, colorful "flow" effect along the strip that would be well-suited to a "trip zone" environment.